{"version":3,"sources":["Components/Note.js","services/notes.js","Components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","concat","type","value","onChange","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAaeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCN9BK,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAEF,qBAAKd,UAAU,QAAf,SAAwBc,KCyElBC,EAzEH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,eAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,IAAqBpB,MAAK,SAACqB,GAAD,OAAkBT,EAASS,QACpD,IAEH,IAiBMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAACjC,GAAD,OAAUA,EAAKG,aAsBlE,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASS,IACvB,yBAAQrB,QAAS,kBAAMoB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,SAEhC,6BACGO,EAAYE,KAAI,SAAClC,GAAD,OACf,cAAC,EAAD,CACEA,KAAMA,EAENC,iBAAkB,kBAhCH,SAACc,GACxB,IAAMf,EAAOqB,EAAMc,MAAK,SAACC,GAAD,OAAOA,EAAErB,KAAOA,KAClCsB,EAAW,2BAAQrC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD2B,EACUf,EAAIsB,GACX3B,MAAK,SAAC4B,GACLhB,EAASD,EAAMa,KAAI,SAAClC,GAAD,OAAWA,EAAKe,KAAOA,EAAKf,EAAOsC,SAEvDC,OAAM,SAACC,GACNZ,EAAgB,SAAD,OACJ5B,EAAKK,QADD,sCAGfoC,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAACG,GAAD,OAAOA,EAAErB,KAAOA,SAgBVd,CAAiBD,EAAKe,MADzCf,EAAKe,SAKhB,uBAAM2B,SAvDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBjC,MAAM,IAAIkC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,GAC3B5C,QAASkB,GAEXO,EAAmBe,GAAYnC,MAAK,SAAC4B,GACnChB,EAASD,EAAM6B,OAAOZ,IACtBd,EAAW,QA8CX,UACE,uBAAO2B,KAAK,OAAOC,MAAO7B,EAAS8B,SA3ChB,SAACV,GACxBnB,EAAWmB,EAAMW,OAAOF,UA2CpB,wBAAQD,KAAK,SAAb,yBC7DOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.19a90838.chunk.js","sourcesContent":["import React from 'react';\nimport '../index.css';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport Note from './Components/Note';\nimport noteService from './services/notes';\nimport Notification from './Components/Notification';\nimport './index.css';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => setNotes(initialNotes));\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      data: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      content: newNote,\n    };\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  const toggleImportance = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            note={note}\n            key={note.id}\n            toggleImportance={() => toggleImportance(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input type=\"text\" value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}